# ts data type
snippet i ": number" i
: number$0
endsnippet

snippet s ": string" i
: string$0
endsnippet

snippet p ": Promise" i
: Promise<$2>$0
endsnippet

snippet b ": boolean" i
: boolean$0
endsnippet

snippet ii ": Number" i
: Number$0
endsnippet

snippet ss ": String" i
: String$0
endsnippet

snippet bb ": Boolean" i
: Boolean$0
endsnippet

snippet ar ": <Array>" i
: $2[]$0
endsnippet

# ts function shortcuts
snippet pr
import { $2 } from '$1'$0
endsnippet

snippet lr "module require <same name>"
import $1 from '$1'$0
endsnippet

snippet mr "module require <diff name>"
import $1 from '$2'$0
endsnippet

snippet npu "@Put()"
@Put('${1:/:id}')
$0
endsnippet

snippet npo "@Post()"
@Post('${1:/:id}')
$0
endsnippet

snippet npa "@Patch()"
@Patch('${1:/:id}')
$0
endsnippet

snippet nge "@Get()"
@Get('${1:/:id}')
$0
endsnippet

# controller decorator
snippet nctr "@Controller()"
@Controller('$1')
$0
endsnippet

# data transfer decorators
snippet npar "@Param()"
@Param(${1:'id'})$0
endsnippet

snippet nbo "@Body()"
@Body($1)$0
endsnippet

snippet nqu "@Query()"
@Query($1)$0
endsnippet

# lib decorators

snippet sap "@ApiProperty()"
@ApiProperty({
	description: '${1:description}',
	required: ${2:true},
})
${4:@IsNotEmpty()}
${5:field}: ${6:string};$0
endsnippet

snippet vne "@IsNotEmpty"
@IsNotEmpty()$0
endsnippet

snippet vma "@Max"
@Max($0)
endsnippet

snippet vmi "@Min"
@Min($0)
endsnippet

snippet vmal "@MaxLength"
@MaxLength($0)
endsnippet

snippet vmil "@MinLength"
@MinLength($0)
endsnippet

snippet vop "@IsOptional"
@IsOptional()$0
endsnippet

snippet tty "@Type"
@Type(() => ${1:Type})$0
endsnippet

snippet vin "@IsInt"
@IsInt()$0
endsnippet

snippet vnu "@IsNumber"
@IsNumber()$0
endsnippet

snippet vbo "@IsBoolean"
@IsBoolean()$0
endsnippet

snippet var "@IsArray"
@IsArray()$0
endsnippet

snippet vob "@IsObject"
@IsObject()$0
endsnippet

snippet vst "@IsString"
@IsString()$0
endsnippet

snippet vne "@IsNotEmpty"
@IsNotEmpty()$0
endsnippet

# throw exceptions
snippet 400 "throw BadRequestException"
throw new BadRequestException(${2:'bad request'})$0
endsnippet

snippet 404 "throw NotFoundException"
throw new NotFoundException('$1 ${2:does not exists}')$0
endsnippet

snippet 401 "thow  UnauthorizedException"
throw new UnauthorizedException(${1:'unauthorized'})$0
endsnippet

snippet 403 "throw ForbiddenException"
throw new ForbiddenException(${1:'forbidden'})$0
endsnippet

snippet 500 "thow InternalServerErrorException"
throw new InternalServerErrorException(${1:'internal server error'})$0
endsnippet

snippet 501 "throw NotImplementedException"
throw new NotImplementedException(${2:'not implemented'})$0
endsnippet

snippet cp "process.stdout.write" i
process.stdout.write($0)
endsnippet

snippet np "new Promise()" i
new Promise((resolve, reject) => $1)
endsnippet

snippet len "arr.length" i
.length$0
endsnippet

snippet fn "function"
${1:async }function $2($3)$4 {
	$5
}$0
endsnippet

snippet pt "then...catch" i
.then(${1:data} => {
	${2:console.log({ $1 })}
})
.catch(${3:err} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet co "console.log({})"
console.log({ $1 })$0
endsnippet

snippet wl "while"
let ${1:i} = ${2:0}
while ($1 ${3:<} ${4:arr.length}) {
	$5
	$1${6:++}
}$0
endsnippet

snippet env "environments" i
process.env.
endsnippet

snippet ll "array.map/filter/reduce/forEach" i
${1:arr}.${2:map}(${3:currentEle} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet fl "for loop"
for (let ${1:i} = ${2:0}; $1 ${3:<} ${4:arr.length}; $1${5:++}) {
	${6:console.log({ currentEle: arr[$1] \})}
}$7
endsnippet

snippet sc "switch...case"
switch(${1:variable}) {
	case $2:
		$3
		break
	case $4:
		$5
		break
	case $6:
		$7
		break
	default:
		$8
}$0
endsnippet

snippet rt "return"
return $0
endsnippet

snippet ndt "new Date()" i
new Date($1)$0
endsnippet

snippet now "Date.now()" i
Date.now()$0
endsnippet

snippet cl "console.log()"
console.log($1)$0
endsnippet

snippet us "use-strict"
'use-strict'

$0
endsnippet

snippet jsf "JSON.stringify" i
JSON.stringify($1)$0
endsnippet

snippet jps "JSON.parse" i
JSON.parse($1)$0
endsnippet

snippet afn "arrow function"
const $1 =${2: async }($3)$4 => {
	$5
}$0
endsnippet

snippet tc "try...catch"
try {
	$1
} catch(${2:error}) {
	${3:console.log({ $2 })}
}$0
endsnippet

snippet doc "documentation"

/**
* ${1:Description}
*
* @param ${2:name} ${3:description}
${4:*/}
endsnippet

snippet para "parameter snippet for docuemntation" i
* @param ${1:name} ${2:description}
${0:*/}
endsnippet
