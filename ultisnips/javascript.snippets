snippet lr "module require <same name>"
const $1 = require('$1')$0
endsnippet

snippet ep "module.exports"
module.exports = {
	$0
}
endsnippet

snippet mr "module require"
const $1 = require('$2')$0
endsnippet

snippet pr "partial module require"
const { $2 } = require('$1')$0
endsnippet

snippet np "new Promise()" i
new Promise((resolve, reject) => $1)
endsnippet

snippet len "arr.length" i
.length$0
endsnippet

snippet fn "function"
${1:async }function $2($3)$4 {
	$5
}$0
endsnippet

snippet pt "then...catch" i
.then(${1:data} => {
	${2:console.log({ $1 })}
})
.catch(${3:err} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet co "console.log({})"
console.log({ $1 })$0
endsnippet

snippet wl "while"
let ${1:i} = ${2:0}
while ($1 ${3:<} ${4:arr.length}) {
	$5
	$1${6:++}
}$0
endsnippet

snippet pev "environments" i
process.env.
endsnippet

snippet ll "array.map/filter/reduce/forEach" i
${1:arr}.${2:map}(${3:currentEle} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet fl "for loop"
for (let ${1:i} = ${2:0}; $1 ${3:<} ${4:arr.length}; $1${5:++}) {
	${6:console.log({ currentEle: arr[$1] \})}
}$7
endsnippet

snippet sc "switch...case"
switch(${1:variable}) {
	case $2:
		$3
		break
	case $4:
		$5
		break
	case $6:
		$7
		break
	default:
		$8
}$0
endsnippet

snippet rt "return"
return $0
endsnippet

snippet ndate "new Date()" i
new Date($1)$0
endsnippet

snippet now "Date.now()" i
Date.now()$0
endsnippet

snippet cl "console.log()"
console.log($1)$0
endsnippet

snippet us "use-strict"
'use-strict'

$0
endsnippet

snippet jsf "JSON.stringify" i
JSON.stringify($1)$0
endsnippet

snippet jps "JSON.parse" i
JSON.parse($1)$0
endsnippet

snippet afn "arrow function"
const $1 =${2: async }($3)$4 => {
	$5
}$0
endsnippet

snippet tc "try...catch"
try {
	$1
} catch(${2:error}) {
	${3:console.log({ $2 })}
}$0
endsnippet

snippet doc "documentation"

/**
* ${1:Description}
*
* @param ${2:name} ${3:description}
${4:*/}
endsnippet

snippet para "parameter snippet for docuemntation" i
* @param ${1:name} ${2:description}
${0:*/}
endsnippet

# ASSERT SNIPPETS =======================================================================
snippet atr "assert.isTrue"
assert.isTrue($0)
endsnippet

snippet ant "assert.isNotTrue"
assert.isNotTrue($0)
endsnippet

snippet abo "assert.isBoolean"
assert.isBoolean($0)
endsnippet

snippet aar "assert.isArray"
assert.isArray($0)
endsnippet

snippet aob "assert.isObject"
assert.isObject($0)
endsnippet

snippet apr "assert.property"
assert.property($0)
endsnippet

snippet aun "assert.isDefined"
assert.isDefined($0)
endsnippet

snippet aun "assert.isUndefined"
assert.isUndefined($0)
endsnippet

snippet ana "assert.isNaN"
assert.isNaN($0)
endsnippet

snippet ani "assert.isNull"
assert.isNull($0)
endsnippet

snippet anu "assert.isNumber"
assert.isNumber($0)
endsnippet

snippet ast "assert.isString"
assert.isString($0)
endsnippet

snippet aeq "assert.equal"
assert.equal($0)
endsnippet

snippet agt "assert.isBelow"
assert.isAbove($0)
endsnippet

snippet alt "assert.isAbove"
assert.isBelow($0)
endsnippet

snippet age "assert.isAtLeast"
assert.isAtLeast($0)
endsnippet

snippet ale "assert.isAtMost"
assert.isAtMost($0)
endsnippet

# FAKER SNIPPETS =======================================================================
snippet ffn "faker.fileName"
faker.system.fileName()
endsnippet

snippet fft "faker.commonFileType"
faker.system.commonFileType()
endsnippet

snippet ffp "faker.filePath"
faker.system.filePath()
endsnippet

snippet ftr "faker.time.recent"
faker.time.recent()
endsnippet

snippet fdp "faker.date.past"
faker.date.past()
endsnippet

snippet fdf "faker.date.future"
faker.date.future()
endsnippet

snippet fdr "faker.date.recent"
faker.date.recent()
endsnippet

snippet fds "faker.date.soon"
faker.date.soon()
endsnippet

snippet fie "faker.email"
faker.internet.email()
endsnippet

snippet fil "faker.url"
faker.internet.url()
endsnippet

snippet fin "faker.username"
faker.internet.userName()
endsnippet

snippet fip "faker.ip"
faker.internet.ip()
endsnippet

snippet fin "faker.username"
faker.internet.userName()
endsnippet

snippet fis "faker.password"
faker.internet.password()
endsnippet

snippet fic "faker.color"
faker.internet.color()
endsnippet

snippet flw "faker.lorem.word"
faker.lorem.word()
endsnippet

snippet flws "faker.lorem.words"
faker.lorem.words()
endsnippet

snippet fls "faker.lorem.sentence"
faker.lorem.sentence()
endsnippet

snippet flss "faker.lorem.sentences"
faker.lorem.sentences()
endsnippet

snippet flp "faker.lorem.paragraph"
faker.lorem.paragraph()
endsnippet

snippet flps "faker.lorem.paragraphs"
faker.lorem.paragraphs()
endsnippet

snippet flt "faker.lorem.text"
faker.lorem.text()
endsnippet

snippet frn "faker.number"
faker.random.number({ min: $1, max: $2 })
endsnippet

snippet frf "faker.float"
faker.random.float({ min: $1, max: $2 })
endsnippet

snippet fru "faker.uuid"
faker.random.uuid()
endsnippet

snippet frl "faker.locale"
faker.random.locale()
endsnippet

snippet frh "faker.hex"
faker.random.hexaDecimal()
endsnippet

snippet fnjt "faker.job-type"
faker.name.jobType()
endsnippet

snippet fnfn "faker.find-name"
faker.name.findName()
endsnippet

snippet fng "faker.gender"
faker.name.gender()
endsnippet

snippet faz "faker.zipCode"
faker.address.zipCode()
endsnippet

snippet fac "faker.city"
faker.address.city()
endsnippet

snippet fala "faker.latitude"
faker.address.latitude()
endsnippet

snippet falo "faker.longtitude"
faker.address.longtitude()
endsnippet
