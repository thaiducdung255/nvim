snippet lr "module require <same name>"
const $1 = require('$1')$0
endsnippet

snippet mr "module require"
const $1 = require('$2')$0
endsnippet

snippet pr "partial module require"
const { $2 } = require('$1')$0
endsnippet

snippet np "new Promise()" i
new Promise((resolve, reject) => $1)
endsnippet

snippet len "arr.length" i
.length$0
endsnippet

snippet fn "function"
${1:async }function $2($3)$4 {
	$5
}$0
endsnippet

snippet pt "then...catch" i
.then(${1:data} => {
	${2:console.log({ $1 })}
})
.catch(${3:err} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet co "console.log({})"
console.log({ $1 })$0
endsnippet

snippet wl "while"
let ${1:i} = ${2:0}
while ($1 ${3:<} ${4:arr.length}) {
	$5
	$1${6:++}
}$0
endsnippet

snippet env "environments" i
process.env.
endsnippet

snippet ll "array.map/filter/reduce/forEach" i
${1:arr}.${2:map}(${3:currentEle} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet fl "for loop"
for (let ${1:i} = ${2:0}; $1 ${3:<} ${4:arr.length}; $1${5:++}) {
	${6:console.log({ currentEle: arr[$1] \})}
}$7
endsnippet

snippet sc "switch...case"
switch(${1:variable}) {
	case $2:
		$3
		break
	case $4:
		$5
		break
	case $6:
		$7
		break
	default:
		$8
}$0
endsnippet

snippet rt "return"
return $0
endsnippet

snippet ndate "new Date()" i
new Date($1)$0
endsnippet

snippet now "Date.now()" i
Date.now()$0
endsnippet

snippet cl "console.log()"
console.log($1)$0
endsnippet

snippet us "use-strict"
'use-strict'

$0
endsnippet

snippet jsf "JSON.stringify" i
JSON.stringify($1)$0
endsnippet

snippet jps "JSON.parse" i
JSON.parse($1)$0
endsnippet

snippet afn "arrow function"
const $1 =${2: async }($3)$4 => {
	$5
}$0
endsnippet

snippet tc "try...catch"
try {
	$1
} catch(${2:error}) {
	${3:console.log({ $2 })}
}$0
endsnippet

snippet doc "documentation"

/**
* ${1:Description}
*
* @param ${2:name} ${3:description}
${4:*/}
endsnippet

snippet para "parameter snippet for docuemntation" i
* @param ${1:name} ${2:description}
${0:*/}
endsnippet
