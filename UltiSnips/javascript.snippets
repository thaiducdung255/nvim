snippet lre "module require <same name>" i
const $1 = require('$1')$0
endsnippet

snippet mre "module require" i
const $1 = require('$2')$0
endsnippet

snippet pre "partial module require" i
const { $2 } = require('$1')$0
endsnippet

snippet npr "new Promise()" i
new Promise((resolve, reject) => $1)
endsnippet

snippet len "arr.length" i
${1:arr}.length$0
endsnippet

snippet fun "function" i
${1:async }function $2($3)$4 {
	$5
}$0
endsnippet

snippet then "then...catch" i
.then(${1:data} => {
	${2:console.log({ $1 })}
})
.catch(${3:err} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet co "console.log({})" i
console.log({ $1 })$0
endsnippet

snippet whi "while" i
let ${1:i} = ${2:0}
while ($1 ${3:<} ${4:arr.length}) {
	$5
	$1${6:++}
}$0
endsnippet

snippet env "environments" i
process.env.
endsnippet

snippet let "let" i
let $1 = $0
endsnippet

snippet con "const" i
const $1 = $0
endsnippet

snippet ite "array.map/filter/reduce/forEach" i
${1:arr}.${2:map}(${3:currentEle} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet for "for loop" i
for (let ${1:i} = ${2:0}; $1 ${3:<} ${4:arr.length}; $1${5:++}) {
	${6:console.log({ currentEle: arr[$1] })}
}$7
endsnippet

snippet swi "switch...case" i
switch(${1:variable}) {
	case $2:
		$3
		break
	case $4:
		$5
		break
	case $6:
		$7
		break
	default:
		$8
}$0
endsnippet

snippet rt "return" i
return $0
endsnippet

snippet nowo "new Date()" i
new Date($1)$0
endsnippet

snippet now "Date.now()" i
Date.now()$0
endsnippet

snippet cl "console.log()" i
console.log($1)$0
endsnippet

snippet uss "use-strict" i
'use-strict'

$0
endsnippet

snippet jsf "JSON.stringify" i
JSON.stringify($1)$0
endsnippet

snippet jps "JSON.parse" i
JSON.parse($1)$0
endsnippet

snippet exp "export module" i
module.exports = {
	$1
}
endsnippet

snippet arf "arrow function" i
const $1 =${2: async }($3)$4 => {
	$5
}$0
endsnippet

snippet try "try...catch" i
try {
	$1
} catch(${2:error}) {
	${3:console.log({ $2 })}
}$0
endsnippet

snippet o
{ $1 }$0
endsnippet

snippet if "if condition" i
if ($1) {
	$2
}$0
endsnippet
