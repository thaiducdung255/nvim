snippet ar
($1) => $2
endsnippet

snippet lre
const $1 = require('$1')$0
endsnippet

snippet mre
const $1 = require('$2')$0
endsnippet

snippet pre
const { $2 } = require('$1')$0
endsnippet

snippet npr
new Promise((resolve, reject) => $1)
endsnippet

snippet len
${1:arr}.length$0
endsnippet

snippet fun
${1:async }function $2($3)$4 {
	$5
}$0
endsnippet

snippet the
.then(${1:data} => {
	${2:console.log({ $1 })}
})
.catch(${3:err} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet co
console.log({ $1 })$0
endsnippet

snippet whi
let ${1:i} = ${2:0}
while ($1 ${3:<} ${4:arr.length}) {
	$5
	$1${6:++}
}$0
endsnippet

snippet env
process.env.
endsnippet

snippet let
let $1 = $0
endsnippet

snippet con
const $1 = $0
endsnippet

snippet ite
${1:arr}.${2:map}(${3:currentEle} => {
	${4:console.log({ $3 })}
})$0
endsnippet

snippet for
for (let ${1:i} = ${2:0}; $1 ${3:<} ${4:arr.length}; $1${5:++}) {
	${6:console.log({ currentEle: arr[$1] })}
}$7
endsnippet

snippet swi
switch(${1:variable}) {
	case $2:
		$3
		break
	case $4:
		$5
		break
	case $6:
		$7
		break
	default:
		$8
}$0
endsnippet

snippet ret
return $0
endsnippet

snippet ono
new Date($1)$0
endsnippet

snippet now
Date.now()$0
endsnippet

snippet cl
console.log($1)$0
endsnippet

snippet uss
'use-strict'

$0
endsnippet

snippet jsf
JSON.stringify($1)$0
endsnippet

snippet jps
JSON.parse($1)$0
endsnippet

snippet exp
module.exports = {
	$1
}
endsnippet

snippet arf
const $1 =${2: async }($3)$4 => {
	$5
}$0
endsnippet

snippet try
try {
	$1
} catch(${2:error}) {
	${3:console.log({ $2 })}
}$0
endsnippet

snippet o
{ $1 }$0
endsnippet

snippet if
if ($1) {
	$2
}$0
endsnippet
